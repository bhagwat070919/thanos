<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thanos - Highly available Prometheus setup with long term storage capabilities</title><link>https://improbable-eng.github.io/thanos/</link><description>Recent content on Thanos - Highly available Prometheus setup with long term storage capabilities</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://improbable-eng.github.io/thanos/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started</title><link>https://improbable-eng.github.io/thanos/getting-started.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/getting-started.md/</guid><description>Getting started Thanos provides a global query view, data backup, and historical data access as its core features in a single binary. All three features can be run independently of each other. This allows you to have a subset of Thanos features ready for immediate benefit or testing, while also making it flexible for gradual roll outs in more complex environments.
In this quick-start guide, we will configure Thanos and all components mentioned to work against a Google Cloud Storage bucket.</description></item><item><title/><link>https://improbable-eng.github.io/thanos/release-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/release-process/</guid><description>For maintainers: Releases This page describes the release process for Thanos project.
NOTE: As Semantic Versioning states all 0.y.z releases can contain breaking changes in API (flags, grpc API, any backward compatibility)
Cadence We aim for at least 1 release per 6 weeks. However, no strict dates are planned.
No release candidates are required until major version.
Additionally we aim for master branch being stable.
Cutting individual release Process of cutting a new minor Thanos release:</description></item><item><title>Bucket</title><link>https://improbable-eng.github.io/thanos/components/bucket.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/components/bucket.md/</guid><description>Bucket The bucket component of Thanos is a set of commands to inspect data in object storage buckets. It is normally run as a stand alone command to aid with troubleshooting.
Example:
$ thanos bucket verify --objstore.config-file=bucket.yml The content of bucket.yml:
type:GCSconfig:bucket:example-bucket Bucket can be extended to add more subcommands that will be helpful when working with object storage buckets by adding a new command within /cmd/thanos/bucket.go
Deployment Flags usage: thanos bucket [&amp;lt;flags&amp;gt;] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt; .</description></item><item><title>Changelog</title><link>https://improbable-eng.github.io/thanos/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/changelog/</guid><description>All notable changes to this project will be documented in this file.
The format is based on Keep a Changelog and this project adheres to Semantic Versioning.
NOTE: As semantic versioning states all 0.y.z releases can contain breaking changes in API (flags, grpc API, any backward compatibility)
We use breaking word for marking changes that are not backward compatible (relates only to v0.y.z releases.)
Unreleased Added #811 Remote write receiver #798 Ability to limit the maximum concurrent about of Series() calls in Thanos Store and the maximum amount of samples.</description></item><item><title>Code of Conduct</title><link>https://improbable-eng.github.io/thanos/code_of_conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/code_of_conduct/</guid><description>Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
Our Standards Examples of behavior that contributes to creating a positive environment include:</description></item><item><title>Compact</title><link>https://improbable-eng.github.io/thanos/components/compact.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/components/compact.md/</guid><description>Compact The compactor component of Thanos applies the compaction procedure of the Prometheus 2.0 storage engine to block data stored in object storage. It is generally not semantically concurrency safe and must be deployed as a singleton against a bucket.
Example:
$ thanos compact --data-dir /tmp/thanos-compact --objstore.config-file=bucket.yml The content of bucket.yml:
type:GCSconfig:bucket:example-bucket The compactor needs local disk space to store intermediate data for its processing. Generally, about 100GB are recommended for it to keep working as the compacted time ranges grow over time.</description></item><item><title>Contribute to docs</title><link>https://improbable-eng.github.io/thanos/contributing/how-to-contribute-to-docs.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/contributing/how-to-contribute-to-docs.md/</guid><description>How to contribute to Docs/Website ./docs directory is used as markdown source files using blackfriday to render Thanos website resources.
However the aim for those is to also have those *.md files renderable and usable (including links) via GitHub.
To make that happen we use following rules and helpers that are listed here
Front Matter Front Matter is essential on top of every markdown file if you want to link this file into any menu/submenu option.</description></item><item><title>Contributing</title><link>https://improbable-eng.github.io/thanos/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/contributing/</guid><description>When contributing not obvious change to Thanos repository, please first discuss the change you wish to make via issue or slack, or any other method with the owners of this repository before making a change.
Please follow the code of conduct in all your interactions with the project.
Thanos Philosophy The philosophy of Thanos and our community is borrowing much from UNIX philosophy and the golang programming language.
Each sub command should do one thing and do it well eg.</description></item><item><title>Deprecated gossip clustering in favor of File SD</title><link>https://improbable-eng.github.io/thanos/proposals/201809_gossip-removal.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/proposals/201809_gossip-removal.md/</guid><description>Ticket: https://github.com/improbable-eng/thanos/issues/484 Summary It is becoming clear that we need to remove gossip protocol as our main way of communication between Thanos Querier and other components. Static configuration seems to be well enough for our simple use cases. To give users more flexibility (similar to gossip auto-join logic), we already wanted to introduce a File SD that allows changing StoreAPIs on-the-fly.
Motivation Gossip protocol (with the membership implementation) was built into Thanos from the very beginning.</description></item><item><title>Design</title><link>https://improbable-eng.github.io/thanos/design.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/design.md/</guid><description>Design Thanos is a set of components that can be composed into a highly available Prometheus setup with long term storage capabilities. Its main goals are operation simplicity and retaining of Prometheus&amp;rsquo;s reliability properties.
The Prometheus metric data model and the 2.0 storage format (spec, slides) are the foundational layers of all components in the system.
Architecture Thanos is a clustered system of components with distinct and decoupled purposes. Clustered components can be categorized as follows:</description></item><item><title>High-availability for store instances</title><link>https://improbable-eng.github.io/thanos/proposals/201807_store_instance_high_availability.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/proposals/201807_store_instance_high_availability.md/</guid><description>Summary This proposal makes total sense and solves our goals when using gossip. However there exists a very easy solution to this problem in form of using just static entry with any loadbalancer like Kubernetes Service to load balance through different Store Gateways. Those are technically stateless, so request can fetch the data independently.
Motivation Thanos store instances currently have no explicit support for high-availability; query instances treat all store instances equally.</description></item><item><title>Object Storage</title><link>https://improbable-eng.github.io/thanos/storage.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/storage.md/</guid><description>Object Storage Thanos supports any object stores that can be implemented against Thanos objstore.Bucket interface
All clients are configured using --objstore.config-file to reference to the configuration file or --objstore.config to put yaml config directly.
Implementations Current object storage client implementations:
Provider Maturity Auto-tested on CI Maintainers Google Cloud Storage Stable (production usage) yes @bwplotka AWS S3 Stable (production usage) yes @bwplotka Azure Storage Account Stable (production usage) yes @vglafirov OpenStack Swift Beta (working PoCs, testing usage) no @sudhi-vm Tencent COS Beta (testing usage) no @jojohappy NOTE: Currently Thanos requires strong consistency (write-read) for object store implementation.</description></item><item><title>Query</title><link>https://improbable-eng.github.io/thanos/components/query.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/components/query.md/</guid><description>Query The query component implements the Prometheus HTTP v1 API to query data in a Thanos cluster via PromQL.
It gathers the data needed to evaluate the query from underlying StoreAPIs. See here on how to connect querier with desired StoreAPIs.
Querier currently is fully stateless and horizontally scalable.
$ thanos query \ --http-address &amp;#34;0.0.0.0:9090&amp;#34; \ --store &amp;#34;&amp;lt;store-api&amp;gt;:&amp;lt;grpc-port&amp;gt;&amp;#34; \ --store &amp;#34;&amp;lt;store-api2&amp;gt;:&amp;lt;grpc-port&amp;gt;&amp;#34; Deduplication The query layer can deduplicate series that were collected from high-availability pairs of data sources such as Prometheus.</description></item><item><title>Read-Write coordination free operational contract for object storage</title><link>https://improbable-eng.github.io/thanos/proposals/201901-read-write-operations-bucket.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/proposals/201901-read-write-operations-bucket.md/</guid><description>Tickets: https://github.com/improbable-eng/thanos/issues/298 (eventual consistency) https://github.com/improbable-eng/thanos/issues/377 (eventual consistency &amp;amp; partial upload) https://github.com/improbable-eng/thanos/issues/564 (retention vs store gateway) https://github.com/improbable-eng/thanos/issues/271 (adapt for removals faster) Summary Our goals here are:
A) Define consistent way of having multiple readers and multiple writers (technically multiple appenders and single remover) on shared object storage that can be eventual consistent. B) Allow readers to sync the object storage changes in eventual consistent manner: (e.g to poll for changes every X minutes instead of watch and react to changes immediately) C) Allow readers to detect and handle partial uploads consistently without any coordination.</description></item><item><title>Rule</title><link>https://improbable-eng.github.io/thanos/components/rule.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/components/rule.md/</guid><description>Rule NOTE: The rule component is experimental since it has conceptual tradeoffs that might not be favorable for most use cases. It is recommended to keep deploying rules to the relevant Prometheus servers.
The rule component should in particular not be used to circumvent solving rule deployment properly at the configuration management level.
The rule component evaluates Prometheus recording and alerting rules against random query nodes in its cluster. Rule results are written back to disk in the Prometheus 2.</description></item><item><title>Service Discovery</title><link>https://improbable-eng.github.io/thanos/service-discovery.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/service-discovery.md/</guid><description>Service Discovery Service discovery has a vital place in Thanos components. It allows Thanos to discover different set API targets required to perform certain operations. This logic is meant to replace Gossip that is planned to be removed.
Currently places that uses Thanos SD: * Thanos Query needs to know about StoreAPI servers in order to query metrics from them. * Thanos Rule needs to know about QueryAPI servers in order to evaluate recording and alerting rules.</description></item><item><title>Sidecar</title><link>https://improbable-eng.github.io/thanos/components/sidecar.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/components/sidecar.md/</guid><description>Sidecar The sidecar component of Thanos gets deployed along with a Prometheus instance. It implements Thanos&amp;rsquo; Store API on top of Prometheus&amp;rsquo; remote-read API and advertises itself as a data source to the cluster. Thereby queriers in the cluster can treat Prometheus servers as yet another source of time series data without directly talking to its APIs. Additionally, the sidecar uploads TSDB blocks to an object storage bucket as Prometheus produces them.</description></item><item><title>Store</title><link>https://improbable-eng.github.io/thanos/components/store.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/components/store.md/</guid><description>Store The store component of Thanos implements the Store API on top of historical data in an object storage bucket. It acts primarily as an API gateway and therefore does not need significant amounts of local disk space. It joins a Thanos cluster on startup and advertises the data it can access. It keeps a small amount of information about all remote blocks on local disk and keeps it in sync with the bucket.</description></item><item><title>Thanos Cluster Configuration</title><link>https://improbable-eng.github.io/thanos/proposals/config.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/proposals/config.md/</guid><description>Summary The proposal of creating a central configuration component within Thanos has been rejected by the community as the requirements are specific to the use case at Improbable and that adding configuration management into Thanos will result in adding more knowledge to the system about what the scrapers are doing and their targets.
Cluster configuration for targets will be implemented in a separate repository and we may look at open sourcing in the future if there are others that have the same needs.</description></item><item><title>Thanos Remote Write</title><link>https://improbable-eng.github.io/thanos/proposals/201812_thanos-remote-receive.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/proposals/201812_thanos-remote-receive.md/</guid><description>Summary This document describes the motivation and design of the Thanos receiver component, as well as how it fits into the rest of the Thanos ecosystem and components.
Motivation The Thanos receiver is the missing piece within Thanos in order to use it to build Prometheus as a Service offering, either as an internal service to the rest of an organization or as an actual pay-as-you-go off the shelf service.</description></item><item><title>Troubleshooting for dev workflow</title><link>https://improbable-eng.github.io/thanos/contributing/dev.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/contributing/dev.md/</guid><description>Dep grouped write of manifest, lock and vendor: scratch directory ... already exists, please remove it Outcome: make deps fails with output: grouped write of manifest, lock and vendor: scratch directory $GOPATH/src/github.com/improbable-eng/thanos/.vendor-new already exists, please remove it
Reason: dep interrupted in the middle of processing.
Fix: rm -rf $GOPATH/src/github.com/improbable-eng/thanos/.vendor-new
Dep failed to unpack tree object Outcome: make deps fails with output: grouped write of manifest, lock and vendor: failed to export github.</description></item></channel></rss>