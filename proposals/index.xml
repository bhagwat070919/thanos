<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Proposals on Thanos - Highly available Prometheus setup with long term storage capabilities</title><link>https://improbable-eng.github.io/thanos/proposals/</link><description>Recent content in Proposals on Thanos - Highly available Prometheus setup with long term storage capabilities</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://improbable-eng.github.io/thanos/proposals/index.xml" rel="self" type="application/rss+xml"/><item><title>Deprecated gossip clustering in favor of File SD</title><link>https://improbable-eng.github.io/thanos/proposals/201809_gossip-removal.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/proposals/201809_gossip-removal.md/</guid><description>Ticket: https://github.com/improbable-eng/thanos/issues/484 Summary It is becoming clear that we need to remove gossip protocol as our main way of communication between Thanos Querier and other components. Static configuration seems to be well enough for our simple use cases. To give users more flexibility (similar to gossip auto-join logic), we already wanted to introduce a File SD that allows changing StoreAPIs on-the-fly.
Motivation Gossip protocol (with the membership implementation) was built into Thanos from the very beginning.</description></item><item><title>High-availability for store instances</title><link>https://improbable-eng.github.io/thanos/proposals/201807_store_instance_high_availability.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/proposals/201807_store_instance_high_availability.md/</guid><description>Summary This proposal makes total sense and solves our goals when using gossip. However there exists a very easy solution to this problem in form of using just static entry with any loadbalancer like Kubernetes Service to load balance through different Store Gateways. Those are technically stateless, so request can fetch the data independently.
Motivation Thanos store instances currently have no explicit support for high-availability; query instances treat all store instances equally.</description></item><item><title>Read-Write coordination free operational contract for object storage</title><link>https://improbable-eng.github.io/thanos/proposals/201901-read-write-operations-bucket.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/proposals/201901-read-write-operations-bucket.md/</guid><description>Tickets: https://github.com/improbable-eng/thanos/issues/298 (eventual consistency) https://github.com/improbable-eng/thanos/issues/377 (eventual consistency &amp;amp; partial upload) https://github.com/improbable-eng/thanos/issues/564 (retention vs store gateway) https://github.com/improbable-eng/thanos/issues/271 (adapt for removals faster) Summary Our goals here are:
A) Define consistent way of having multiple readers and multiple writers (technically multiple appenders and single remover) on shared object storage that can be eventual consistent. B) Allow readers to sync the object storage changes in eventual consistent manner: (e.g to poll for changes every X minutes instead of watch and react to changes immediately) C) Allow readers to detect and handle partial uploads consistently without any coordination.</description></item><item><title>Thanos Cluster Configuration</title><link>https://improbable-eng.github.io/thanos/proposals/config.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/proposals/config.md/</guid><description>Summary The proposal of creating a central configuration component within Thanos has been rejected by the community as the requirements are specific to the use case at Improbable and that adding configuration management into Thanos will result in adding more knowledge to the system about what the scrapers are doing and their targets.
Cluster configuration for targets will be implemented in a separate repository and we may look at open sourcing in the future if there are others that have the same needs.</description></item><item><title>Thanos Remote Write</title><link>https://improbable-eng.github.io/thanos/proposals/201812_thanos-remote-receive.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://improbable-eng.github.io/thanos/proposals/201812_thanos-remote-receive.md/</guid><description>Summary This document describes the motivation and design of the Thanos receiver component, as well as how it fits into the rest of the Thanos ecosystem and components.
Motivation The Thanos receiver is the missing piece within Thanos in order to use it to build Prometheus as a Service offering, either as an internal service to the rest of an organization or as an actual pay-as-you-go off the shelf service.</description></item></channel></rss>